class Solution {
    // public static boolean Balanced(int[]  nums){
    //     HashSet<Integer> es=new HashSet<>();
    //     HashSet<Integer> os=new HashSet<>();
    //     for(int i=0;i<nums.length;i++){
    //         if(nums[i]%2==0){
    //             es.add(nums[i]);
    //         }
    //         else{
    //             os.add(nums[i]);
    //         }
    //     }
    //         return es.size()==os.size();
        
    // }
    public int longestBalanced(int[] nums) {
        int maxlen=0;
        for(int start=0;start<nums.length;start++){
            HashSet<Integer> es=new HashSet<>();
        HashSet<Integer> os=new HashSet<>();
            for(int end=start;end<nums.length;end++){
                if(nums[end]%2==0){
                es.add(nums[end]);
            }
            else{
                os.add(nums[end]);
            }
                if(es.size()==os.size()){
                    maxlen=Math.max(maxlen,end-start+1);
                }
            }
        }
        return maxlen;
    }
}Â©leetcode
